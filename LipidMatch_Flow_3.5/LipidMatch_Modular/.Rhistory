#Iteratively search across all files and compile species with fragments into one table
for (i in 1:length(All_Info_Files)){
#import file (i = 5 is a good test case)
#print(i)
All_Info_Temp<-read.csv(paste(Dir_Additional_Files,"/",All_Info_Files[i],sep=""), sep=",", na.strings="NA", dec=".", strip.white=TRUE,header=FALSE, check.names = FALSE)
All_Info_Temp<-as.matrix(All_Info_Temp)
#get instances of RT_Min in headers to define the fragment columns
RT_Min_Index<-grep("RT_min", All_Info_Temp[1,], value = F, fixed = T)
#Index which columns have fragments (with and without the precursor included)
Frag_Index<-3:(RT_Min_Index[1]-1)
Frag_Index_No_Adduct<-4:(RT_Min_Index[1]-1)
## Count 1's, if no 1's remove rows
Frags<-which(All_Info_Temp[2:nrow(All_Info_Temp),Frag_Index_No_Adduct]=="1")
#if there are fragments
if (length(Frags)>0){
# store current row
RowFragsFilled<-nrow(FragsFilled)
# reduce to those with Frags
for (x in 2:nrow(All_Info_Temp)) {
#calculate number of fragments
Frag_Count<-length(which(All_Info_Temp[x,Frag_Index_No_Adduct]=="1"))
if(Frag_Count>0) {
#Combine all fragments with 1's into one line
Frags_One_Line<-paste(All_Info_Temp[1,which(All_Info_Temp[x,Frag_Index]=="1")+2],collapse=";")
#Vector of attributes (names, fragments, comment, File), will add file later
VectorNewTable<-c(All_Info_Temp[x,2],Frags_One_Line,All_Info_Temp[x,RT_Min_Index[1]+2],NA,Frag_Count)
FragsFilled<-rbind(FragsFilled,VectorNewTable)
}
}
FragsFilled[(RowFragsFilled+1):nrow(FragsFilled),4]<-gsub("_Neg.*","",All_Info_Files[i])
}
## 1's will also be used to pull out and append observed fragments
}
#Header
Header_Frags<-FragsFilled[1,]
#Remove empty row
FragsFilled<-FragsFilled[c(-1,-2),]
#Sort by the number of fragments
FragsFilledSorted<-FragsFilled[order(as.numeric(FragsFilled[,5]),decreasing=TRUE),]
#Sort by the comments
FragsFilledSorted<-FragsFilledSorted[order(FragsFilledSorted[,3]),]
#Add back headers
FragsFilledSortedHead<-rbind(Header_Frags,FragsFilledSorted)
#Export total list of fragments and hits by FluoroMatch before appending and reducing
write.table(FragsFilledSortedHead, paste(InputDirectory,"/Output/Neg_OnlyIDs_Fragments.csv",sep=""), sep=",",col.names=FALSE, row.names=FALSE, quote=TRUE, na="NA")
#aggregate values
#FragsSortAggregate<-aggregate(FragsFilledSorted, list(FragsFilledSorted[,3]), function(x) paste0(unique(x)))
FragsSortAggregate<-aggregate(FragsFilledSorted, by=list(FragsFilledSorted[,3]),function(x) paste(x,sep="|"))
#Import NegIDed to append new columns
NegIDed <- read.csv(paste(InputDirectory,"/Output/NegIDed.csv",sep=""), header=FALSE)
#################################start here#################################
#Add 4 extra columns to be filled with 1) Tentative_IDs	2) Fragments	3) number of fragments 4) Files
NewCols<-matrix(NA,nrow(NegIDed),4)
NewCols[1,]<-c("Potential_IDs","Frags","Num_Frags","Files")
NegIDed <- cbind(NegIDed, NewCols)
NegIDed <- as.matrix(NegIDed)
#Break aggregates up and append to NegIDed
for (i in RowStartForFeatureTableData:nrow(NegIDed)) {
if (NegIDed[i,CommentColumn]%in%FragsSortAggregate[,1]) {
#find the row in the FragSorAggregate table which has a matching identified to NegIDed
Feature_Position<-match(NegIDed[i,CommentColumn],FragsSortAggregate[,1])
#Collapse strings of each variable to append and add to NegIDed
NegIDed[i,(ncol(NegIDed)-3)]<-paste0(FragsSortAggregate[Feature_Position,2][[1]],collapse="|")
NegIDed[i,(ncol(NegIDed)-2)]<-paste0(FragsSortAggregate[Feature_Position,3][[1]],collapse="|")
NegIDed[i,(ncol(NegIDed)-1)]<-paste0(FragsSortAggregate[Feature_Position,6][[1]],collapse="|")
NegIDed[i,ncol(NegIDed)]<-paste0(FragsSortAggregate[Feature_Position,5][[1]],collapse="|")
}
}
#Get the row for which no IDs exist
NoIDs_row<-min(which(nchar(NegIDed[,ncol(NegIDed)-4])<1))
# sort from that row down using the first element of number of fragments
NegIDed[NoIDs_row:nrow(NegIDed),]<-NegIDed[order(NegIDed[NoIDs_row:nrow(NegIDed),ncol(NegIDed)-1],decreasing=TRUE)+NoIDs_row-1,]
write.table(NegIDed, paste(InputDirectory,"/Output/NegIDed_Fragments.csv",sep=""), sep=",",col.names=FALSE, row.names=FALSE, quote=TRUE, na="NA")
}
####################################End functions##########################################
####Read in files, create folder structure, and error handle####
if(length(foldersToRun)==0){
lengthFoldersToRun <- 1 #if there are no subfolders, that means you have the feature table and ms2s in that current directory, therefore, run analysis on those files.
}else{
lengthFoldersToRun <- length(foldersToRun)#run analysis on all subfolders
}
for(i in seq_len(lengthFoldersToRun)){
if(length(foldersToRun)==0){#we're in current (and only) folder that contains feature table and ms2
fpath <- InputDirectory
}else if(foldersToRun[i] == "Output"){
fpath <- InputDirectory
print(paste("Warning: Remove your 'Output' folder from the current Input Directory:", InputDirectory))
}else{
fpath <- paste(InputDirectory, foldersToRun[i], "\\", sep="")
}
fileName <- basename(fpath)
ddMS2NEG_in <- list.files(path=fpath, pattern="[nNgG]\\.ms2", ignore.case=FALSE)
AIFMS1NEG_in <- list.files(path=fpath, pattern="[nNgG]\\.ms1", ignore.case=FALSE)
AIFMS2NEG_in <- list.files(path=fpath, pattern="[nNgG]\\.ms2", ignore.case=FALSE)
ddMS2POS_in <- list.files(path=fpath, pattern="[pPsS]\\.ms2", ignore.case=FALSE)
AIFMS1POS_in <- list.files(path=fpath, pattern="[pPsS]\\.ms1", ignore.case=FALSE)
AIFMS2POS_in <- list.files(path=fpath, pattern="[pPsS]\\.ms2", ignore.case=FALSE)
#separate ddMS and AIF
ddMS2NEG_in <- ddMS2NEG_in[grep("[dD][dD]", ddMS2NEG_in)]
AIFMS1NEG_in <- AIFMS1NEG_in[grep("[Aa][Ii][Ff]", AIFMS1NEG_in)] #Yang 20180315. Orig: AIFMS1NEG_in <- AIFMS1NEG_in[grep("[AIFaif][AIFaif][AIFaif]", AIFMS1NEG_in)]
AIFMS2NEG_in <- AIFMS2NEG_in[grep("[Aa][Ii][Ff]", AIFMS2NEG_in)] #Yang 20180315. Orig: AIFMS2NEG_in <- AIFMS2NEG_in[grep("[AIFaif][AIFaif][AIFaif]", AIFMS2NEG_in)]
ddMS2POS_in <- ddMS2POS_in[grep("[dD][dD]", ddMS2POS_in)]
AIFMS1POS_in <- AIFMS1POS_in[grep("[Aa][Ii][Ff]", AIFMS1POS_in)] #Yang 20180315. Orig: AIFMS1POS_in <- AIFMS1POS_in[grep("[AIFaif][AIFaif][AIFaif]", AIFMS1POS_in)]
AIFMS2POS_in <- AIFMS2POS_in[grep("[Aa][Ii][Ff]", AIFMS2POS_in)] #Yang 20180315. Orig: AIFMS2POS_in <- AIFMS2POS_in[grep("[AIFaif][AIFaif][AIFaif]", AIFMS2POS_in)]
#user info outputted for error handling
if(length(ddMS2POS_in) == 0){
print(paste("CAUTION: We detected", length(ddMS2POS_in),"positive ddMS .ms2 files in the folder: ", fileName," ...If this incorrect, check that you have 'p', 'P', 'pos', or 'POS' at the end of the file name and you must have a 'dd' within the name. OR Remove the folder: ", fileName))
}
if(length(ddMS2NEG_in) == 0){
print(paste("CAUTION: We detected", length(ddMS2NEG_in),"negative ddMS .ms2 files in the folder: ", fileName," ...If this incorrect, check that you have 'n', 'N', 'neg', or 'NEG' at the end of the file name and you must have a 'dd' within the name. OR Remove the folder: ", fileName))
}
if(length(AIFMS1POS_in) == 0){
print(paste("CAUTION: We detected", length(AIFMS1POS_in),"positive AIF .ms1 files in the folder: ", fileName," ...If this incorrect, check that you have ('AIF') and ('p', 'P', 'pos', or 'POS') at the end of the file name. OR Remove the folder: ", fileName))
}
if(length(AIFMS1NEG_in) == 0){
print(paste("CAUTION: We detected", length(AIFMS1NEG_in),"negative AIF .ms1 files in the folder: ", fileName," ...If this incorrect, check that you have ('AIF') and ('n', 'N', 'neg', or 'NEG') at the end of the file name. OR Remove the folder: ", fileName))
}
if(length(AIFMS2POS_in) == 0){
print(paste("CAUTION: We detected", length(AIFMS2POS_in),"positive AIF .ms2 files in the folder: ", fileName," ...If this incorrect, check that you have ('AIF') and ('p', 'P', 'pos', or 'POS') at the end of the file name. OR Remove the folder: ", fileName))
}
if(length(AIFMS2NEG_in) == 0){
print(paste("CAUTION: We detected", length(AIFMS2NEG_in),"negative AIF .ms2 files in the folder: ", fileName," ...If this incorrect, check that you have ('AIF') and ('n', 'N', 'neg', or 'NEG') at the end of the file name. OR Remove the folder: ", fileName))
}
FeatureTable_NEG <- list.files(path=fpath, pattern="[nNgG]\\.csv", ignore.case=FALSE)
if(length(FeatureTable_NEG) > 1){
stop(paste("ERROR: You should only have 1 Negative mode Feature Table... we detected", length(FeatureTable_NEG)," Feature Tables in the folder:", fileName))
}else if(length(FeatureTable_NEG) == 0){
print(paste("CAUTION: Could not find any negative mode Feature Tables... we detected", length(FeatureTable_NEG)," Feature Tables in the folder: ", fileName," ...If this incorrect, check that you have an 'n', 'N', 'neg', or 'NEG' at the end of the file name. OR Remove the folder: ", fileName))
}
FeatureTable_POS <- list.files(path=fpath, pattern="[PpSs]\\.csv", ignore.case=FALSE)
if(length(FeatureTable_POS) > 1){
stop(paste("ERROR: You should only have 1 Positive mode Feature Table... we detected", length(FeatureTable_POS)," Feature Tables in the folder:", fileName))
}else if(length(FeatureTable_POS) == 0){
print(paste("CAUTION: Could not find any Positive mode Feature Tables... we detected", length(FeatureTable_POS)," Feature Tables in the folder: ", fileName," ...If this incorrect, check that you have an 'p', 'P', 'pos', or 'POS' at the end of the file name. OR Remove the folder: ", fileName))
}
#Negative/Positive mode sample names (took .ms2 files and dropped the ".ms2")
ExtraSampleNameddMSNEG_in <- vector()
ExtraSampleNameddMSPOS_in <- vector()
ExtraSampleNameAIFNEG_in <- vector()
ExtraSampleNameAIFPOS_in <- vector()
for(j in seq_len(length(ddMS2NEG_in))){   ExtraSampleNameddMSNEG_in[j] <- sub("\\.\\w+", "", ddMS2NEG_in[j])    }
for(j in seq_len(length(ddMS2POS_in))){   ExtraSampleNameddMSPOS_in[j] <- sub("\\.\\w+", "", ddMS2POS_in[j])    }
for(j in seq_len(length(AIFMS2NEG_in))){   ExtraSampleNameAIFNEG_in[j] <- sub("\\.\\w+", "", AIFMS2NEG_in[j])    }
for(j in seq_len(length(AIFMS2POS_in))){   ExtraSampleNameAIFPOS_in[j] <- sub("\\.\\w+", "", AIFMS2POS_in[j])    }
runPosddMS <- FALSE
runNegddMS <- FALSE
runPosAIF <- FALSE
runNegAIF <- FALSE
#Run Negative mode analysis if there are negative .ms2 and .csv files
if(length(ddMS2NEG_in) != 0 && length(FeatureTable_NEG) == 1){  runNegddMS <- TRUE  }
#Run Positive mode analysis if there are positive .ms2 and .csv files
if(length(ddMS2POS_in) != 0 && length(FeatureTable_POS) == 1) {
runPosddMS <- TRUE
}
if(length(AIFMS2NEG_in) != 0 && length(AIFMS1NEG_in) != 0 && length(FeatureTable_NEG) == 1){  runNegAIF <- TRUE   }
if(length(AIFMS2POS_in) != 0 && length(AIFMS1POS_in) != 0 && length(FeatureTable_POS) == 1){  runPosAIF <- TRUE   }
#Create output file structure
#Shrimp
#--AIF
#----Neg
#------Additional_Files
#------Confirmed_Lipids
#----Pos
#------Additional_Files
#------Confirmed_Lipids
#--ddMS
#----Neg
#------Additional_Files
#------Confirmed_Lipids
#----Pos
#------Additional_Files
#------Confirmed_Lipids
#----PosByClass
#------Additional_Files
#------Confirmed_Lipids
if(length(foldersToRun)==0){#1 root folder
OutputDirectory<-paste(InputDirectory, "Output\\", sep="")
if(!dir.exists(OutputDirectory)){ dir.create(OutputDirectory) }
if(runPosAIF || runNegAIF){#AIF
OutputDirectoryAIF <- paste(InputDirectory, "Output\\AIF\\", sep="")
if(!dir.exists(OutputDirectoryAIF)){  dir.create(OutputDirectoryAIF)  }
if(runPosAIF){#pos AIF
OutputDirectoryAIFPos_in <- paste(OutputDirectoryAIF,"Pos\\",sep="")
if(!dir.exists(OutputDirectoryAIFPos_in)){ dir.create(OutputDirectoryAIFPos_in) }
}
if(runNegAIF){#neg AIF
OutputDirectoryAIFNeg_in <- paste(OutputDirectoryAIF,"Neg\\",sep="")
if(!dir.exists(OutputDirectoryAIFNeg_in)){ dir.create(OutputDirectoryAIFNeg_in) }
}
}
if(runPosddMS || runNegddMS){#ddMS
OutputDirectoryddMS <- paste(InputDirectory, "Output\\ddMS\\", sep="")
if(!dir.exists(OutputDirectoryddMS)){ dir.create(OutputDirectoryddMS) }
if(runPosddMS){#pos ddMS
OutputDirectoryddMSPos_in <- paste(OutputDirectoryddMS,"Pos\\",sep="")
if(!dir.exists(OutputDirectoryddMSPos_in)){ dir.create(OutputDirectoryddMSPos_in) }
}
if(runPosddMS){#posByClass ddMS
OutputDirectoryddMSPosByClass_in <- paste(OutputDirectoryddMS,"PosByClass\\",sep="")
if(!dir.exists(OutputDirectoryddMSPosByClass_in)){ dir.create(OutputDirectoryddMSPosByClass_in) }
}
if(runNegddMS){#negByClass ddMS
OutputDirectoryddMSNegByClass_in <- paste(OutputDirectoryddMS,"NegByClass\\",sep="")
if(!dir.exists(OutputDirectoryddMSNegByClass_in)){ dir.create(OutputDirectoryddMSNegByClass_in) }
}
if(runNegddMS){#neg ddMS
OutputDirectoryddMSNeg_in <- paste(OutputDirectoryddMS,"Neg\\",sep="")
if(!dir.exists(OutputDirectoryddMSNeg_in)){ dir.create(OutputDirectoryddMSNeg_in) }
}
}
}else{#more than 1 root folder
OutputDirectory <- paste(InputDirectory, foldersToRun[i], "\\Output\\", sep="")
if(!dir.exists(OutputDirectory)){ dir.create(OutputDirectory) }
if(runPosAIF || runNegAIF){#AIF
OutputDirectoryAIF <- paste(OutputDirectory, "AIF\\", sep="")
if(!dir.exists(OutputDirectoryAIF)){  dir.create(OutputDirectoryAIF)  }
if(runPosAIF){#pos AIF
OutputDirectoryAIFPos_in <- paste(OutputDirectoryAIF, "Pos\\",sep="")
if(!dir.exists(OutputDirectoryAIFPos_in)){ dir.create(OutputDirectoryAIFPos_in) }
}
if(runNegAIF){#neg AIF
OutputDirectoryAIFNeg_in <- paste(OutputDirectoryAIF, "Neg\\",sep="")
if(!dir.exists(OutputDirectoryAIFNeg_in)){ dir.create(OutputDirectoryAIFNeg_in) }
}
}
if(runPosddMS || runNegddMS){#ddMS
OutputDirectoryddMS <- paste(OutputDirectory, "ddMS\\", sep="")
if(!dir.exists(OutputDirectoryddMS)){ dir.create(OutputDirectoryddMS) }
if(runPosddMS){#pos ddMS
OutputDirectoryddMSPos_in <- paste(OutputDirectoryddMS, "Pos\\",sep="")
if(!dir.exists(OutputDirectoryddMSPos_in)){ dir.create(OutputDirectoryddMSPos_in) }
}
if(runPosddMS){#posByClass ddMS
OutputDirectoryddMSPosByClass_in <- paste(OutputDirectoryddMS, "PosByClass\\",sep="")
if(!dir.exists(OutputDirectoryddMSPosByClass_in)){ dir.create(OutputDirectoryddMSPosByClass_in) }
}
if(runNegddMS){#negByClass ddMS
OutputDirectoryddMSNegByClass_in <- paste(OutputDirectoryddMS,"NegByClass\\",sep="")
if(!dir.exists(OutputDirectoryddMSNegByClass_in)){ dir.create(OutputDirectoryddMSNegByClass_in) }
}
if(runNegddMS){#neg ddMS
OutputDirectoryddMSNeg_in <- paste(OutputDirectoryddMS, "Neg\\",sep="")
if(!dir.exists(OutputDirectoryddMSNeg_in)){ dir.create(OutputDirectoryddMSNeg_in) }
}
}
}#end else
#### Run the libraries and input data ####
NegClassDDLib <- FALSE
PosDDLib <- FALSE
NegDDLib <- FALSE
PosClassDDLib <- FALSE
NegAIFLib <- FALSE
PosAIFLib <- FALSE
#NEG
LibraryCriteria <- read.csv(LibCriteria) #Read-in Library ID criteria (csv) located in the LibrariesReducedAdducts folder
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,7]) == "NEG" & toupper(LibraryCriteria[,6]) == "FALSE",] #subset LibraryCriteria to find negative libraries
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,4]) == "TRUE",] #subset LibraryCriteria to find ddMS libraries to run
if(runNegddMS && nrow(LibraryCriteria)>0){
NegDDLib <- TRUE
FeatureTable_dir_in<-paste(fpath, FeatureTable_NEG, sep="")
cat(paste0("Reading in file:\t", FeatureTable_NEG,"\nFrom Directory:\t\t", FeatureTable_dir_in,"\n"))
FeatureList_in <- ReadFeatureTable(FeatureTable_dir_in)
for (c in 1:length(ddMS2NEG_in)){
MS2_dir_in <- paste(fpath, ddMS2NEG_in[c], sep="")
cat(paste0("Reading in file:\t", ddMS2NEG_in[c],"\nFrom Directory:\t\t", MS2_dir_in,"\n"))
ExtraSample<-ExtraSampleNameddMSNEG_in[c]
MS2_df_in <- createddMS2dataFrame(MS2_dir_in)
OutputInfo <- c(MS2_dir_in, ExtraSample, FeatureTable_dir_in)
for(i in seq_len(nrow(LibraryCriteria))){
LibraryFile <- paste(InputLibrary, LibraryCriteria[i,1], sep="") #create directory/file of each library
OutputName <- paste(ExtraSample,"_",gsub('.{4}$', '', LibraryCriteria[i,1]), sep="") #get ms2 name and library name
ConfirmANDCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,2]), ";")))
ConfirmORCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,3]), ";")))
if(length(ConfirmANDCol)==0){ConfirmANDCol<-NULL}
if(length(ConfirmORCol)==0){ConfirmORCol<-NULL}
RunTargeted(MS2_df_in, FeatureList_in, LibraryFile, ParentMZcol_in, OutputDirectoryddMSNeg_in, OutputName, ConfirmORCol, ConfirmANDCol, OutputInfo)
}
}
print("Finished Negative ddMS analysis")
}
#POS ddMS
LibraryCriteria <- read.csv(LibCriteria) #Read-in Library ID criteria (csv) located in the LibrariesReducedAdducts folder
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,7]) == "POS" & toupper(LibraryCriteria[,6]) == "FALSE",] #subset LibraryCriteria to find positive libraries(not pos-by-class)
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,4]) == "TRUE",] #subset LibraryCriteria to find ddMS libraries to run
if(runPosddMS && nrow(LibraryCriteria)>0){
PosDDLib <- TRUE
FeatureTable_dir_in<-paste(fpath, FeatureTable_POS, sep="")
cat(paste0("Reading in file:\t", FeatureTable_POS,"\nFrom Directory:\t\t", FeatureTable_dir_in,"\n"))
FeatureList_in <- ReadFeatureTable(FeatureTable_dir_in)
for (c in 1:length(ddMS2POS_in)){
MS2_dir_in <- paste(fpath, ddMS2POS_in[c],sep="")
cat(paste0("Reading in file:\t", ddMS2POS_in[c],"\nFrom Directory:\t\t", MS2_dir_in,"\n"))
ExtraSample <- ExtraSampleNameddMSPOS_in[c]
MS2_df_in <- createddMS2dataFrame(MS2_dir_in)
OutputInfo <- c(MS2_dir_in, ExtraSample, FeatureTable_dir_in)
for(i in seq_len(nrow(LibraryCriteria))){
LibraryFile <- paste(InputLibrary, LibraryCriteria[i,1], sep="") #create directory/file of each library
OutputName <- paste(ExtraSample,"_",gsub('.{4}$', '', LibraryCriteria[i,1]), sep="") #get ms2 name and library name
ConfirmANDCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,2]), ";")))
ConfirmORCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,3]), ";")))
if(length(ConfirmANDCol)==0 || is.na(ConfirmANDCol)){ConfirmANDCol<-NULL}
if(length(ConfirmORCol)==0 || is.na(ConfirmORCol)){ConfirmORCol<-NULL}
RunTargeted(MS2_df_in, FeatureList_in, LibraryFile, ParentMZcol_in, OutputDirectoryddMSPos_in, OutputName, ConfirmORCol, ConfirmANDCol, OutputInfo)
}
}
print("Finished Positive ddMS analysis")
}
#NEG BY CLASS
LibraryCriteria <- read.csv(LibCriteria) #Read-in Library ID criteria (csv) located in the LibrariesReducedAdducts folder
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,7]) == "NEG" & toupper(LibraryCriteria[,6]) == "TRUE",] #subset LibraryCriteria to find negative libraries
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,4]) == "TRUE",] #subset LibraryCriteria to find ddMS libraries to run
if(runNegddMS && nrow(LibraryCriteria)>0){
NegClassDDLib <- TRUE
FeatureTable_dir_in<-paste(fpath, FeatureTable_NEG, sep="")
cat(paste0("Reading in file:\t", FeatureTable_NEG,"\nFrom Directory:\t\t", FeatureTable_dir_in,"\n"))
FeatureList_in <- ReadFeatureTable(FeatureTable_dir_in)
for (c in 1:length(ddMS2NEG_in)){
MS2_dir_in <- paste(fpath, ddMS2NEG_in[c], sep="")
cat(paste0("Reading in file:\t", ddMS2NEG_in[c],"\nFrom Directory:\t\t", MS2_dir_in,"\n"))
ExtraSample<-ExtraSampleNameddMSNEG_in[c]
MS2_df_in <- createddMS2dataFrame(MS2_dir_in)
OutputInfo <- c(MS2_dir_in, ExtraSample, FeatureTable_dir_in)
for(i in seq_len(nrow(LibraryCriteria))){
LibraryFile <- paste(InputLibrary, LibraryCriteria[i,1], sep="") #create directory/file of each library
OutputName <- paste(ExtraSample,"_",gsub('.{4}$', '', LibraryCriteria[i,1]), sep="") #get ms2 name and library name
ConfirmANDCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,2]), ";")))
ConfirmORCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,3]), ";")))
if(length(ConfirmANDCol)==0 || is.na(ConfirmANDCol)){ConfirmANDCol<-NULL}
if(length(ConfirmORCol)==0 || is.na(ConfirmORCol)){ConfirmORCol<-NULL}
RunTargeted(MS2_df_in, FeatureList_in, LibraryFile, ParentMZcol_in, OutputDirectoryddMSNegByClass_in, OutputName, ConfirmORCol, ConfirmANDCol, OutputInfo)
}
}
print("Finished Negative by class ddMS analysis")
}
#POS BY CLASS
LibraryCriteria <- read.csv(LibCriteria) #Read-in Library ID criteria (csv) located in the LibrariesReducedAdducts folder
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,7]) == "POS" & toupper(LibraryCriteria[,6]) == "TRUE",] #subset LibraryCriteria to find positive class libraries
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,4]) == "TRUE",] #subset LibraryCriteria to find ddMS libraries to run
if(runPosddMS && nrow(LibraryCriteria)>0){
PosClassDDLib<-TRUE
FeatureTable_dir_in<-paste(fpath, FeatureTable_POS, sep="")
cat(paste0("Reading in file:\t", FeatureTable_POS,"\nFrom Directory:\t\t", FeatureTable_dir_in,"\n"))
FeatureList_in <- ReadFeatureTable(FeatureTable_dir_in)
for (c in 1:length(ddMS2POS_in)){
MS2_dir_in<-paste(fpath, ddMS2POS_in[c],sep="")
cat(paste0("Reading in file:\t", ddMS2POS_in[c],"\nFrom Directory:\t\t", MS2_dir_in,"\n"))
ExtraSample<-ExtraSampleNameddMSPOS_in[c]
MS2_df_in <- createddMS2dataFrame(MS2_dir_in)
OutputInfo <- c(MS2_dir_in, ExtraSample, FeatureTable_dir_in)
for(i in seq_len(nrow(LibraryCriteria))){
LibraryFile <- paste(InputLibrary, LibraryCriteria[i,1], sep="") #create directory/file of each library
OutputName <- paste(ExtraSample,"_",gsub('.{4}$', '', LibraryCriteria[i,1]), sep="") #get ms2 name and library name
ConfirmANDCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,2]), ";")))
ConfirmORCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,3]), ";")))
if(length(ConfirmANDCol)==0 || is.na(ConfirmANDCol)){ConfirmANDCol<-NULL}
if(length(ConfirmORCol)==0 || is.na(ConfirmORCol)){ConfirmORCol<-NULL}
RunTargeted(MS2_df_in, FeatureList_in, LibraryFile, ParentMZcol_in, OutputDirectoryddMSPosByClass_in, OutputName, ConfirmORCol, ConfirmANDCol, OutputInfo)
}
}
print("Finished Positive by class ddMS analysis")
}
####AIF####
#Neg AIF
LibraryCriteria <- read.csv(LibCriteria) #Read-in Library ID criteria (csv) located in the LibrariesReducedAdducts folder
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,7]) == "NEG",] #subset LibraryCriteria to find negative class libraries
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,5]) == "TRUE",] #subset LibraryCriteria to find AIF libraries to run
if(runNegAIF && nrow(LibraryCriteria)>0){
NegAIFLib <- TRUE
FeatureTable_dir_in<-paste(fpath, FeatureTable_NEG, sep="")
cat(paste0("Reading in file:\t", FeatureTable_NEG,"\nFrom Directory:\t\t", FeatureTable_dir_in,"\n"))
FeatureList_in <- ReadFeatureTable(FeatureTable_dir_in)
#sort AIF files
AIFMS1NEG_in <- AIFMS1NEG_in[order(AIFMS1NEG_in)]
AIFMS2NEG_in <- AIFMS2NEG_in[order(AIFMS2NEG_in)]
for (c in 1:length(AIFMS1NEG_in)){
MS1_dir_in <- paste(fpath, AIFMS1NEG_in[c], sep="")
cat(paste0("Reading in file:\t", AIFMS1NEG_in[c],"\nFrom Directory:\t\t", MS1_dir_in,"\n"))
MS1_df_in <- createMS1dataFrame(MS1_dir_in)
MS2_dir_in <- paste(fpath, AIFMS2NEG_in[c], sep="")
cat(paste0("Reading in file:\t", AIFMS2NEG_in[c],"\nFrom Directory:\t\t", MS2_dir_in,"\n"))
MS2_df_in <- createAIFMS2dataFrame(MS2_dir_in)
ExtraSample<-ExtraSampleNameAIFNEG_in[c]
OutputInfo <- c(MS2_dir_in, ExtraSample, FeatureTable_dir_in, MS1_dir_in)
for(i in seq_len(nrow(LibraryCriteria))){
LibraryFile <- paste(InputLibrary, LibraryCriteria[i,1], sep="") #create directory/file of each library
OutputName <- paste(ExtraSample,"_",gsub('.{4}$', '', LibraryCriteria[i,1]), sep="") #get ms2 name and library name
ConfirmANDCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,2]), ";")))
ConfirmORCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,3]), ";")))
if(length(ConfirmANDCol)==0 || is.na(ConfirmANDCol)){ConfirmANDCol<-NULL}
if(length(ConfirmORCol)==0 || is.na(ConfirmORCol)){ConfirmORCol<-NULL}
RunAIF(MS1_df_in, MS2_df_in, FeatureList_in, LibraryFile, ParentMZcol_in, OutputDirectoryAIFNeg_in, OutputName, ConfirmORCol, ConfirmANDCol, OutputInfo)
}
}
print("Finished Negative AIF analysis")
}
#Pos AIF
LibraryCriteria <- read.csv(LibCriteria) #Read-in Library ID criteria (csv) located in the LibrariesReducedAdducts folder
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,7]) == "POS",] #subset LibraryCriteria to find positive class libraries
LibraryCriteria <- LibraryCriteria[toupper(LibraryCriteria[,5]) == "TRUE",] #subset LibraryCriteria to find AIF libraries to run
if(runPosAIF && nrow(LibraryCriteria)>0){
PosAIFLib <- TRUE
FeatureTable_dir_in<-paste(fpath, FeatureTable_POS, sep="")
cat(paste0("Reading in file:\t", FeatureTable_POS,"\nFrom Directory:\t\t", FeatureTable_dir_in,"\n"))
FeatureList_in <- ReadFeatureTable(FeatureTable_dir_in)
AIFMS1POS_in <- AIFMS1POS_in[order(AIFMS1POS_in)]
AIFMS2POS_in <- AIFMS2POS_in[order(AIFMS2POS_in)]
for (c in 1:length(AIFMS1POS_in)){
MS1_dir_in <- paste(fpath, AIFMS1POS_in[c], sep="")
cat(paste0("Reading in file:\t", AIFMS1POS_in[c],"\nFrom Directory:\t\t", MS1_dir_in,"\n"))
MS1_df_in <- createMS1dataFrame(MS1_dir_in)
MS2_dir_in <- paste(fpath, AIFMS2POS_in[c], sep="")
cat(paste0("Reading in file:\t", AIFMS2POS_in[c],"\nFrom Directory:\t\t", MS2_dir_in,"\n"))
MS2_df_in <- createAIFMS2dataFrame(MS2_dir_in)
ExtraSample<-ExtraSampleNameAIFPOS_in[c]
OutputInfo <- c(MS2_dir_in, ExtraSample, FeatureTable_dir_in, MS1_dir_in)
for(i in seq_len(nrow(LibraryCriteria))){
LibraryFile <- paste(InputLibrary, LibraryCriteria[i,1], sep="") #create directory/file of each library
OutputName <- paste(ExtraSample,"_",gsub('.{4}$', '', LibraryCriteria[i,1]), sep="") #get ms2 name and library name
ConfirmANDCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,2]), ";")))
ConfirmORCol <- as.numeric(unlist(strsplit(as.character(LibraryCriteria[i,3]), ";")))
if(length(ConfirmANDCol)==0){ConfirmANDCol<-NULL}
if(length(ConfirmORCol)==0){ConfirmORCol<-NULL}
RunAIF(MS1_df_in, MS2_df_in, FeatureList_in, LibraryFile, ParentMZcol_in, OutputDirectoryAIFPos_in, OutputName, ConfirmORCol, ConfirmANDCol, OutputInfo)
}
}
print("Finished Positive AIF analysis")
}
#Compilation/ID code for reduced confirmed files
if(runPosAIF || runPosddMS){
print("Creating Identifications for Positive Mode")
}
if(runPosddMS & !runPosAIF){
ddMS2directory<-paste(OutputDirectoryddMSPos_in,"Confirmed_Lipids\\", sep="")
Classdirectory<-paste(OutputDirectoryddMSPosByClass_in,"Confirmed_Lipids\\", sep="")
AIFdirectory<-"Nothing"
CreateIDs(paste(fpath,FeatureTable_POS,sep=""), ddMS2directory, Classdirectory, AIFdirectory, ImportLibPOS, OutputDirectory, PosDDLib, PosClassDDLib, PosAIFLib, "Pos")
AppendFrag(CommentColumn, RowStartForFeatureTableData, InputDirectory, NegPos = "Pos")
}
if(runPosAIF & runPosddMS){
ddMS2directory<-paste(OutputDirectoryddMSPos_in,"Confirmed_Lipids\\", sep="")
Classdirectory<-paste(OutputDirectoryddMSPosByClass_in,"Confirmed_Lipids\\", sep="")
AIFdirectory<-paste(OutputDirectoryAIFPos_in,"Confirmed_Lipids\\", sep="")
CreateIDs(paste(fpath,FeatureTable_POS,sep=""), ddMS2directory, Classdirectory, AIFdirectory, ImportLibPOS, OutputDirectory, PosDDLib, PosClassDDLib, PosAIFLib, "Pos")
AppendFrag(CommentColumn, RowStartForFeatureTableData, InputDirectory, NegPos = "Pos")
}
if(runPosAIF & !runPosddMS){
ddMS2directory<-"Nothing"
Classdirectory<-"Nothing"
AIFdirectory<-paste(OutputDirectoryAIFPos_in,"Confirmed_Lipids\\", sep="")
CreateIDs(paste(fpath,FeatureTable_POS,sep=""), ddMS2directory, Classdirectory, AIFdirectory, ImportLibPOS, OutputDirectory, PosDDLib, PosClassDDLib, PosAIFLib, "Pos")
}
if(runNegAIF || runNegddMS){
print("Creating Identifications for Negative Mode")
}
if(runNegAIF & !runNegddMS){
ddMS2directory <- "Nothing"
Classdirectory <- "Nothing"
AIFdirectory <- paste(OutputDirectoryAIFNeg_in,"Confirmed_Lipids\\", sep="")
CreateIDs(paste(fpath,FeatureTable_NEG,sep=""), ddMS2directory, Classdirectory, AIFdirectory, ImportLibNEG, OutputDirectory, NegDDLib, NegClassDDLib, NegAIFLib, "Neg")
}
if(runNegddMS & !runNegAIF){
ddMS2directory <- paste(OutputDirectoryddMSNeg_in,"Confirmed_Lipids\\", sep="")
Classdirectory <- paste(OutputDirectoryddMSNegByClass_in,"Confirmed_Lipids\\", sep="")
AIFdirectory <- "Nothing"
CreateIDs(paste(fpath,FeatureTable_NEG,sep=""), ddMS2directory, Classdirectory, AIFdirectory, ImportLibNEG, OutputDirectory, NegDDLib, NegClassDDLib, NegAIFLib, "Neg")
AppendFrag(CommentColumn, RowStartForFeatureTableData, InputDirectory, NegPos = "Neg")
}
if(runNegddMS & runNegAIF){
ddMS2directory <- paste(OutputDirectoryddMSNeg_in,"Confirmed_Lipids\\", sep="")
Classdirectory <- paste(OutputDirectoryddMSNegByClass_in,"Confirmed_Lipids\\", sep="")
AIFdirectory <- paste(OutputDirectoryAIFNeg_in,"Confirmed_Lipids\\", sep="")
CreateIDs(paste(fpath,FeatureTable_NEG,sep=""), ddMS2directory, Classdirectory, AIFdirectory, ImportLibNEG, OutputDirectory, NegDDLib, NegClassDDLib, NegAIFLib, "Neg")
AppendFrag(CommentColumn, RowStartForFeatureTableData, InputDirectory, NegPos = "Neg")
}
}#end folder loop
options(warn=0)#suppress warning off
Rversion<-(paste("ERROR:R version must be equal to, or between, 2.0.3 and 3.3.3. Please download 3.3.3. You are using version: ", paste(version$major,version$minor,sep=".")))
OutputRemoval<-paste("ERROR: Remove your 'Output' folder from the current Input Directory: ", InputDirectory)
###Code to append fragments and tentative annotations###
#DEBUG CreateIDs
# ddMS2directory<-"Nothing"
# Classdirectory<-"Nothing"
# AIFdirectory<-paste(OutputDirectoryAIFPos_in,"Confirmed_Lipids\\", sep="")
# PeakTableDirectory <- paste(fpath,FeatureTable_POS,sep="")
# ddMS2directory <- ddMS2directory
# Classdirectory <- Classdirectory
# AIFdirectory <- AIFdirectory
# ImportLib <- ImportLibPOS
# OutputDirectory <- OutputDirectory
# ddMS2 <- PosDDLib
# ddMS2Class <- PosClassDDLib
# AIF <- PosAIFLib
# mode <- "Pos"
#CreateIDs(paste(fpath,FeatureTable_POS,sep=""), ddMS2directory, Classdirectory,
#AIFdirectory, ImportLibPOS, OutputDirectory, PosDDLib, PosClassDDLib, PosAIFLib, "Pos")
#Debug AIF
# ms1_df<-MS1_df_in
# ms2_df<-MS2_df_in
# FeatureList<-FeatureList_in
# LibraryLipid_self<-LibraryFile
# ParentMZcol<-ParentMZcol_in
# OutputDirectory<-OutputDirectoryAIFNeg_in
# ExtraFileNameInfo<-OutputName
# ConfirmORcol<-ConfirmORCol
# ConfirmANDcol<-ConfirmANDCol
if(!((as.numeric(paste(version$major,version$minor,sep=""))>=20.3) && (as.numeric(paste(version$major,version$minor,sep=""))<=33.3))) {
Rversion
}
if(ErrorOutput==1){
OutputRemoval
}
InputDirectory
